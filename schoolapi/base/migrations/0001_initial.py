# Generated by Django 4.0.3 on 2022-09-23 19:04

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'school_manager'), (2, 'school_teacher'), (3, 'student'), (4, 'no_role')], null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'permissions': (('can_get_students', 'Get details of student'), ('can_post_students', 'Post students Data'), ('can_delete_students', 'Delete students'), ('can_update_student_data', 'Update student Data'), ('can_add_edit_delete_class', 'Full control over classes'), ('get_self_grades', 'student to get their grades'), ('get_teacher_grades', 'teachers on their own subject grades'), ('full_controll_over_grades', 'full control in grades'), ('post_grades', 'To post grades'), ('edit_grades', 'edit grades'), ('full_control_over_subjects', 'full control over subjects'), ('get_teacher_information', 'get teacher information'), ('full_control_over_teacher', 'full control over teachers'), ('can_delete_self_teacher', 'can Delete themselves from db'), ('can_edit_self_teacher', 'Change some data from themselves'), ('can_add_apousia', 'apousies')),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Classroom',
            fields=[
                ('classname', models.CharField(choices=[('A', 'dhmotiko_a'), ('B', 'dhmotiko_b'), ('C', 'dhmotiko_c'), ('D', 'dhmotiko_d'), ('E', 'dhmotiko_e'), ('ST', 'dhmotiko_st'), ('GA', 'gymnasio_a'), ('GB', 'gymnasio_b'), ('GC', 'gymnasio_c'), ('LA', 'lykeio_a'), ('LB', 'lykeio_b'), ('LC', 'lykeio_c')], default='A', max_length=2)),
                ('class_number', models.IntegerField(default=1)),
                ('maximum', models.IntegerField()),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('students_in', models.IntegerField(default=0)),
            ],
            options={
                'unique_together': {('classname', 'class_number')},
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('phone', models.CharField(max_length=10)),
                ('student_id', models.AutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('photo', models.ImageField(default='student_pics/default.png', upload_to='student_pics')),
                ('apousies', models.IntegerField(default=0)),
                ('taxh', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.classroom')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('phone', models.CharField(max_length=10)),
                ('teacher_id', models.AutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='subject',
            fields=[
                ('onoma', models.CharField(max_length=20)),
                ('subject_id', models.AutoField(primary_key=True, serialize=False)),
                ('taxh', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.classroom')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.teacher')),
            ],
            options={
                'unique_together': {('onoma', 'taxh')},
            },
        ),
        migrations.CreateModel(
            name='Assignments',
            fields=[
                ('pdf_question', models.FileField(blank=True, upload_to='assigments')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('deadline', models.DateTimeField()),
                ('title', models.CharField(max_length=100)),
                ('question', models.CharField(blank=True, max_length=1000)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('Subject', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='base.subject')),
                ('classroom', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='base.classroom')),
            ],
        ),
        migrations.CreateModel(
            name='StudentAssigments',
            fields=[
                ('file', models.FileField(blank=True, upload_to='student_assigments')),
                ('score', models.IntegerField(blank=True, default=1, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)])),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.assignments')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.student')),
            ],
            options={
                'unique_together': {('student', 'assignment')},
            },
        ),
        migrations.CreateModel(
            name='Grades',
            fields=[
                ('grade', models.IntegerField(default=0)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('classroom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.classroom')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.student')),
                ('subject_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.subject')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.teacher')),
            ],
            options={
                'unique_together': {('student', 'subject_name')},
            },
        ),
    ]
